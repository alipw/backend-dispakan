"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelegramService = void 0;
const common_1 = require("@nestjs/common");
const operators_1 = require("rxjs/operators");
const Telegram = require("./interfaces/telegramTypes.interface");
const telegram_constants_1 = require("./telegram.constants");
let TelegramService = class TelegramService {
    constructor(options, http) {
        this.options = options;
        this.http = http;
    }
    onModuleInit() {
        this.url = `https://api.telegram.org/bot${this.options.botKey}/`;
    }
    doCall(url, data, axiosOptions) {
        return this.http
            .post(this.url + url, data, axiosOptions)
            .pipe(operators_1.map((res) => {
            if (!res.data.ok) {
                throw new Telegram.TelegramException(res.data.description, res.data.error_code.toString());
            }
            return res.data.result;
        }), operators_1.catchError((error) => {
            throw new Telegram.TelegramException(error.message);
        }));
    }
    getUpdates(data) {
        return this.doCall(this.getUpdates.name, data);
    }
    getMe() {
        return this.doCall(this.getMe.name, {});
    }
    sendMessage(data) {
        return this.doCall(this.sendMessage.name, data);
    }
    forwardMessage(data) {
        return this.doCall(this.forwardMessage.name, data);
    }
    sendPhoto(data) {
        return this.doCall(this.sendPhoto.name, data, {
            headers: {
                'Content-Type': typeof data.photo === 'object'
                    ? 'multipart/form-data'
                    : 'application/json',
            },
        });
    }
    sendAudio(data) {
        return this.doCall(this.sendAudio.name, data, {
            headers: {
                'Content-Type': typeof data.audio === 'object' || typeof data.thumb === 'object'
                    ? 'multipart/form-data'
                    : 'application/json',
            },
        });
    }
    sendDocument(data) {
        return this.doCall(this.sendDocument.name, data, {
            headers: {
                'Content-Type': typeof data.document === 'object' || typeof data.thumb === 'object'
                    ? 'multipart/form-data'
                    : 'application/json',
            },
        });
    }
    sendVideo(data) {
        return this.doCall(this.sendVideo.name, data, {
            headers: {
                'Content-Type': typeof data.video === 'object' || typeof data.thumb === 'object'
                    ? 'multipart/form-data'
                    : 'application/json',
            },
        });
    }
    sendAnimation(data) {
        return this.doCall(this.sendAnimation.name, data, {
            headers: {
                'Content-Type': typeof data.animation === 'object' || typeof data.thumb === 'object'
                    ? 'multipart/form-data'
                    : 'application/json',
            },
        });
    }
    sendVoice(data) {
        return this.doCall(this.sendVoice.name, data, {
            headers: {
                'Content-Type': typeof data.voice === 'object' || typeof data.thumb === 'object'
                    ? 'multipart/form-data'
                    : 'application/json',
            },
        });
    }
    sendVideoNote(data) {
        return this.doCall(this.sendVideoNote.name, data, {
            headers: {
                'Content-Type': typeof data.video_note === 'object' ||
                    typeof data.thumb === 'object'
                    ? 'multipart/form-data'
                    : 'application/json',
            },
        });
    }
    sendMediaGroup(data) {
        return this.doCall(this.sendMediaGroup.name, data, {
            headers: {
                'Content-Type': 'multipart/form-data',
            },
        });
    }
    sendLocation(data) {
        return this.doCall(this.sendLocation.name, data);
    }
    editMessageLiveLocation(data) {
        return this.doCall(this.editMessageLiveLocation.name, data);
    }
    stopMessageLiveLocation(data) {
        return this.doCall(this.stopMessageLiveLocation.name, data);
    }
    sendVenue(data) {
        return this.doCall(this.sendVenue.name, data);
    }
    sendContact(data) {
        return this.doCall(this.sendContact.name, data);
    }
    sendPoll(data) {
        return this.doCall(this.sendPoll.name, data);
    }
    sendChatAction(data) {
        return this.doCall(this.sendChatAction.name, data);
    }
    getUserProfilePhotos(data) {
        return this.doCall(this.getUserProfilePhotos.name, data);
    }
    getFile(data) {
        return this.doCall(this.getFile.name, data);
    }
    kickChatMember(data) {
        return this.doCall(this.kickChatMember.name, data);
    }
    unbanChatMember(data) {
        return this.doCall(this.unbanChatMember.name, data);
    }
    restrictChatMember(data) {
        return this.doCall(this.restrictChatMember.name, data);
    }
    promoteChatMember(data) {
        return this.doCall(this.promoteChatMember.name, data);
    }
    exportChatInviteLink(data) {
        return this.doCall(this.exportChatInviteLink.name, data);
    }
    setChatPhoto(data) {
        return this.doCall(this.setChatPhoto.name, data, {
            headers: {
                'Content-Type': 'multipart/form-data',
            },
        });
    }
    deleteChatPhoto(data) {
        return this.doCall(this.deleteChatPhoto.name, data);
    }
    setChatTitle(data) {
        return this.doCall(this.setChatTitle.name, data);
    }
    setChatDescription(data) {
        return this.doCall(this.setChatDescription.name, data);
    }
    pinChatMessage(data) {
        return this.doCall(this.pinChatMessage.name, data);
    }
    unpinChatMessage(data) {
        return this.doCall(this.unpinChatMessage.name, data);
    }
    leaveChat(data) {
        return this.doCall(this.leaveChat.name, data);
    }
    getChat(data) {
        return this.doCall(this.getChat.name, data);
    }
    getChatAdministrators(data) {
        return this.doCall(this.getChatAdministrators.name, data);
    }
    getChatMembersCount(data) {
        return this.doCall(this.getChatMembersCount.name, data);
    }
    getChatMember(data) {
        return this.doCall(this.getChatMember.name, data);
    }
    setChatStickerSet(data) {
        return this.doCall(this.setChatStickerSet.name, data);
    }
    deleteChatStickerSet(data) {
        return this.doCall(this.deleteChatStickerSet.name, data);
    }
    answerCallbackQuery(data) {
        return this.doCall(this.answerCallbackQuery.name, data);
    }
    editMessageText(data) {
        return this.doCall(this.editMessageText.name, data);
    }
    editMessageCaption(data) {
        return this.doCall(this.editMessageCaption.name, data);
    }
    editMessageMedia(data) {
        return this.doCall(this.editMessageMedia.name, data, {
            headers: {
                'Content-Type': 'multipart/form-data',
            },
        });
    }
    editMessageReplyMarkup(data) {
        return this.doCall(this.editMessageReplyMarkup.name, data);
    }
    stopPoll(data) {
        return this.doCall(this.editMessageReplyMarkup.name, data);
    }
    deleteMessage(data) {
        return this.doCall(this.deleteMessage.name, data);
    }
    sendSticker(data) {
        return this.doCall(this.sendSticker.name, data, {
            headers: {
                'Content-Type': typeof data.sticker === 'object'
                    ? 'multipart/form-data'
                    : 'application/json',
            },
        });
    }
    getStickerSet(data) {
        return this.doCall(this.getStickerSet.name, data);
    }
    uploadStickerFile(data) {
        return this.doCall(this.uploadStickerFile.name, data, {
            headers: {
                'Content-Type': 'multipart/form-data',
            },
        });
    }
    createNewStickerSet(data) {
        return this.doCall(this.createNewStickerSet.name, data, {
            headers: {
                'Content-Type': typeof data.png_sticker === 'object'
                    ? 'multipart/form-data'
                    : 'application/json',
            },
        });
    }
    addStickerToSet(data) {
        return this.doCall(this.addStickerToSet.name, data, {
            headers: {
                'Content-Type': typeof data.png_sticker === 'object'
                    ? 'multipart/form-data'
                    : 'application/json',
            },
        });
    }
    setStickerPositionInSet(data) {
        return this.doCall(this.setStickerPositionInSet.name, data);
    }
    deleteStickerFromSet(data) {
        return this.doCall(this.deleteStickerFromSet.name, data);
    }
    sendInvoice(data) {
        return this.doCall(this.sendInvoice.name, data);
    }
    answerShippingQuery(data) {
        return this.doCall(this.answerShippingQuery.name, data);
    }
    answerPreCheckoutQuery(data) {
        return this.doCall(this.answerPreCheckoutQuery.name, data);
    }
    sendGame(data) {
        return this.doCall(this.sendGame.name, data);
    }
    setGameScore(data) {
        return this.doCall(this.setGameScore.name, data);
    }
    getGameHighScore(data) {
        return this.doCall(this.getGameHighScore.name, data);
    }
};
TelegramService = __decorate([
    common_1.Injectable(),
    __param(0, common_1.Inject(telegram_constants_1.TELEGRAM_MODULE_OPTIONS)),
    __metadata("design:paramtypes", [Object, common_1.HttpService])
], TelegramService);
exports.TelegramService = TelegramService;
//# sourceMappingURL=telegram.service.js.map