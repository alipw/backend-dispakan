import { HttpService, OnModuleInit } from '@nestjs/common';
import { Observable } from 'rxjs';
import { TelegramModuleOptions } from './interfaces';
import * as Telegram from './interfaces/telegramTypes.interface';
export declare class TelegramService implements OnModuleInit {
    private readonly options;
    private readonly http;
    private url;
    constructor(options: TelegramModuleOptions, http: HttpService);
    onModuleInit(): void;
    private doCall;
    getUpdates(data: Telegram.GetUpdatesParams): Observable<Telegram.Update[]>;
    getMe(): Observable<Telegram.TelegramUser>;
    sendMessage(data: Telegram.TelegramSendMessageParams): Observable<Telegram.TelegramMessage>;
    forwardMessage(data: Telegram.TelegramForwardMessageParams): Observable<Telegram.TelegramMessage>;
    sendPhoto(data: Telegram.TelegramSendPhotoParams): Observable<Telegram.TelegramMessage>;
    sendAudio(data: Telegram.TelegramSendAudioParams): Observable<Telegram.TelegramMessage>;
    sendDocument(data: Telegram.TelegramSendDocumentParams): Observable<Telegram.TelegramMessage>;
    sendVideo(data: Telegram.TelegramSendVideoParams): Observable<Telegram.TelegramMessage>;
    sendAnimation(data: Telegram.TelegramSendAnimationParams): Observable<Telegram.TelegramMessage>;
    sendVoice(data: Telegram.TelegramSendVoiceParams): Observable<Telegram.TelegramMessage>;
    sendVideoNote(data: Telegram.TelegramSendVideoNoteParams): Observable<Telegram.TelegramMessage>;
    sendMediaGroup(data: Telegram.TelegramSendMediaGroupParams): Observable<Telegram.TelegramMessage[]>;
    sendLocation(data: Telegram.TelegramSendLocationParams): Observable<Telegram.TelegramMessage>;
    editMessageLiveLocation(data: Telegram.TelegramEditMessageLiveLocationParams): Observable<Telegram.TelegramMessage | true>;
    stopMessageLiveLocation(data: Telegram.TelegramStopMessageLiveLocationParams): Observable<Telegram.TelegramMessage | true>;
    sendVenue(data: Telegram.TelegramSendVenueParams): Observable<Telegram.TelegramMessage>;
    sendContact(data: Telegram.TelegramSendContactParams): Observable<Telegram.TelegramMessage>;
    sendPoll(data: Telegram.TelegramSendPollParams): Observable<Telegram.TelegramMessage>;
    sendChatAction(data: Telegram.TelegramSendChatActionParams): Observable<true>;
    getUserProfilePhotos(data: Telegram.TelegramGetUserProfilePhotosParams): Observable<Telegram.TelegramUserProfilePhotos>;
    getFile(data: Telegram.TelegramGetFileParams): Observable<Telegram.TelegramFile>;
    kickChatMember(data: Telegram.TelegramKickChatMemberParams): Observable<true>;
    unbanChatMember(data: Telegram.TelegramUnbanChatMemberParams): Observable<true>;
    restrictChatMember(data: Telegram.TelegramRestrictChatMemberParams): Observable<true>;
    promoteChatMember(data: Telegram.TelegramPromoteChatMemberParams): Observable<true>;
    exportChatInviteLink(data: Telegram.TelegramExportChatInviteLinkParams): Observable<string>;
    setChatPhoto(data: Telegram.TelegramSetChatPhotoParams): Observable<true>;
    deleteChatPhoto(data: Telegram.TelegramDeleteChatPhotoParams): Observable<true>;
    setChatTitle(data: Telegram.TelegramSetChatTitleParams): Observable<true>;
    setChatDescription(data: Telegram.TelegramSetChatDescriptionParams): Observable<true>;
    pinChatMessage(data: Telegram.TelegramPinChatMessageParams): Observable<true>;
    unpinChatMessage(data: Telegram.TelegramUnpinChatMessageParams): Observable<true>;
    leaveChat(data: Telegram.TelegramLeaveChatParams): Observable<true>;
    getChat(data: Telegram.TelegramGetChatParams): Observable<Telegram.TelegramChat>;
    getChatAdministrators(data: Telegram.TelegramGetChatAdministratorsParams): Observable<Telegram.TelegramChatMember[]>;
    getChatMembersCount(data: Telegram.TelegramGetChatMembersCountParams): Observable<number>;
    getChatMember(data: Telegram.TelegramGetChatMemberParams): Observable<Telegram.TelegramChatMember>;
    setChatStickerSet(data: Telegram.TelegramSetChatStickerSetParams): Observable<true>;
    deleteChatStickerSet(data: Telegram.TelegramChatDeleteStickerSetParams): Observable<true>;
    answerCallbackQuery(data: Telegram.TelegramAnswerCallbackQueryParams): Observable<true>;
    editMessageText(data: Telegram.TelegramEditMessageTextParams): Observable<Telegram.TelegramMessage | true>;
    editMessageCaption(data: Telegram.TelegramEditMessageCaptionParams): Observable<Telegram.TelegramMessage | true>;
    editMessageMedia(data: Telegram.TelegramEditMessageMediaParams): Observable<Telegram.TelegramMessage | true>;
    editMessageReplyMarkup(data: Telegram.TelegramEditMessageReplyMarkupParams): Observable<Telegram.TelegramMessage | true>;
    stopPoll(data: Telegram.TelegramStopPollParams): Observable<Telegram.TelegramPoll>;
    deleteMessage(data: Telegram.TelegramDeleteMessageParams): Observable<true>;
    sendSticker(data: Telegram.TelegramSendStickerParams): Observable<Telegram.TelegramMessage>;
    getStickerSet(data: Telegram.TelegramGetStickerSetParams): Observable<Telegram.TelegramStickerSet>;
    uploadStickerFile(data: Telegram.TelegramUploadStickerFileParams): Observable<Telegram.TelegramFile>;
    createNewStickerSet(data: Telegram.TelegramCreateNewStickerSetParams): Observable<true>;
    addStickerToSet(data: Telegram.TelegramAddStickerToSetParams): Observable<true>;
    setStickerPositionInSet(data: Telegram.TelegramSetStickerPositionInSetParams): Observable<true>;
    deleteStickerFromSet(data: Telegram.TelegramDeleteStickerFromSetParams): Observable<true>;
    sendInvoice(data: Telegram.TelegramSendInvoiceParams): Observable<Telegram.TelegramMessage>;
    answerShippingQuery(data: Telegram.TelegramAnswerShippingQueryParams): Observable<true>;
    answerPreCheckoutQuery(data: Telegram.TelegramAnswerPreCheckoutQueryParams): Observable<true>;
    sendGame(data: Telegram.TelegramSendGameParams): Observable<Telegram.TelegramMessage>;
    setGameScore(data: Telegram.TelegramSetGameScoreParams): Observable<Telegram.TelegramMessage | true>;
    getGameHighScore(data: Telegram.TelegramGetGameHighScoreParams): Observable<Telegram.TelegramGameHighScore[]>;
}
